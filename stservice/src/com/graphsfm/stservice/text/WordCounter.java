package com.graphsfm.stservice.text;

import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Counts word frequencies using the intermediate file generated by WikiExtractor.
 * The output is a dictionary of words with frequencies.
 * 
 * @author shaileshb
 */
public class WordCounter {
    private static Logger log = Logger.getLogger(WordCounter.class.getName());
    private HashMap<String, Integer> words = new HashMap<String, Integer>(
            10 * 1024 * 1024);

    private void countWordFrequencies(String mstr) {
        String[] tokens = mstr.split("[^a-zA-Z]+");
        for (String t : tokens) {
            if (t.length() < 3)
                continue;
            t = new String(t.toLowerCase()); // create a new String.. otherwise
                                             // we end up keeping references
                                             // to the big char arrays
                                             // allocated by the buffered
                                             // reader!
            Integer count = words.get(t);
            if (count == null)
                count = 1;
            else
                count = count + 1;
            words.put(t, count);
        }
    }
    
    public void init(String fname) {
    	long count = 0;
    	long last = 0;
    	try {
    		DataInputStream is = new DataInputStream(new FileInputStream(fname));
            while (true) {
            	long fileid = is.readLong();
            	long len = is.readLong();
            	byte[] buf = new byte[(int) len];
            	is.read(buf);
            	
            	String str = new String(buf);
                countWordFrequencies(str);
                count += len;
                if (count > last + 1024 * 1024) {
                    System.err.printf(
                            "processed = %d Mb, word count = %d, fileid = %d\n",
                            count / 1024 / 1024, words.size(), fileid);
                    last = count;
                }
            }
    	} catch (IOException e) {
            log.log(Level.WARNING, "Error: " + fname, e);
		}
    }

    private void writeMap() {
        for (Map.Entry<String, Integer> e : words.entrySet()) {
            System.out.print(e.getValue());
            System.out.print(" ");
            System.out.println(e.getKey());
        }
    }

    public static void main(String[] args) {
        WordCounter wc = new WordCounter();
        wc.init(args[0]);
        wc.writeMap();
    }
}
